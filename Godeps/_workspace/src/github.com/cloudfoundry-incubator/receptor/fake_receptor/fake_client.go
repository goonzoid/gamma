// This file was generated by counterfeiter
package fake_receptor

import (
	"sync"

	"github.com/cloudfoundry-incubator/receptor"
)

type FakeClient struct {
	CreateTaskStub        func(receptor.TaskCreateRequest) error
	createTaskMutex       sync.RWMutex
	createTaskArgsForCall []struct {
		arg1 receptor.TaskCreateRequest
	}
	createTaskReturns struct {
		result1 error
	}
	TasksStub              func() ([]receptor.TaskResponse, error)
	getAllTasksMutex       sync.RWMutex
	getAllTasksArgsForCall []struct{}
	getAllTasksReturns     struct {
		result1 []receptor.TaskResponse
		result2 error
	}
	TasksByDomainStub              func(domain string) ([]receptor.TaskResponse, error)
	getAllTasksByDomainMutex       sync.RWMutex
	getAllTasksByDomainArgsForCall []struct {
		domain string
	}
	getAllTasksByDomainReturns struct {
		result1 []receptor.TaskResponse
		result2 error
	}
	GetTaskStub        func(taskId string) (receptor.TaskResponse, error)
	getTaskMutex       sync.RWMutex
	getTaskArgsForCall []struct {
		taskId string
	}
	getTaskReturns struct {
		result1 receptor.TaskResponse
		result2 error
	}
	DeleteTaskStub        func(taskId string) error
	deleteTaskMutex       sync.RWMutex
	deleteTaskArgsForCall []struct {
		taskId string
	}
	deleteTaskReturns struct {
		result1 error
	}
	CancelTaskStub        func(taskId string) error
	cancelTaskMutex       sync.RWMutex
	cancelTaskArgsForCall []struct {
		taskId string
	}
	cancelTaskReturns struct {
		result1 error
	}
	CreateDesiredLRPStub        func(receptor.DesiredLRPCreateRequest) error
	createDesiredLRPMutex       sync.RWMutex
	createDesiredLRPArgsForCall []struct {
		arg1 receptor.DesiredLRPCreateRequest
	}
	createDesiredLRPReturns struct {
		result1 error
	}
	GetDesiredLRPStub        func(processGuid string) (receptor.DesiredLRPResponse, error)
	getDesiredLRPMutex       sync.RWMutex
	getDesiredLRPArgsForCall []struct {
		processGuid string
	}
	getDesiredLRPReturns struct {
		result1 receptor.DesiredLRPResponse
		result2 error
	}
	UpdateDesiredLRPStub        func(processGuid string, update receptor.DesiredLRPUpdateRequest) error
	updateDesiredLRPMutex       sync.RWMutex
	updateDesiredLRPArgsForCall []struct {
		processGuid string
		update      receptor.DesiredLRPUpdateRequest
	}
	updateDesiredLRPReturns struct {
		result1 error
	}
	DeleteDesiredLRPStub        func(processGuid string) error
	deleteDesiredLRPMutex       sync.RWMutex
	deleteDesiredLRPArgsForCall []struct {
		processGuid string
	}
	deleteDesiredLRPReturns struct {
		result1 error
	}
	DesiredLRPsStub              func() ([]receptor.DesiredLRPResponse, error)
	getAllDesiredLRPsMutex       sync.RWMutex
	getAllDesiredLRPsArgsForCall []struct{}
	getAllDesiredLRPsReturns     struct {
		result1 []receptor.DesiredLRPResponse
		result2 error
	}
	DesiredLRPsByDomainStub              func(domain string) ([]receptor.DesiredLRPResponse, error)
	getAllDesiredLRPsByDomainMutex       sync.RWMutex
	getAllDesiredLRPsByDomainArgsForCall []struct {
		domain string
	}
	getAllDesiredLRPsByDomainReturns struct {
		result1 []receptor.DesiredLRPResponse
		result2 error
	}
	ActualLRPsStub              func() ([]receptor.ActualLRPResponse, error)
	getAllActualLRPsMutex       sync.RWMutex
	getAllActualLRPsArgsForCall []struct{}
	getAllActualLRPsReturns     struct {
		result1 []receptor.ActualLRPResponse
		result2 error
	}
	ActualLRPsByDomainStub              func(domain string) ([]receptor.ActualLRPResponse, error)
	getAllActualLRPsByDomainMutex       sync.RWMutex
	getAllActualLRPsByDomainArgsForCall []struct {
		domain string
	}
	getAllActualLRPsByDomainReturns struct {
		result1 []receptor.ActualLRPResponse
		result2 error
	}
	ActualLRPsByProcessGuidStub              func(processGuid string) ([]receptor.ActualLRPResponse, error)
	getAllActualLRPsByProcessGuidMutex       sync.RWMutex
	getAllActualLRPsByProcessGuidArgsForCall []struct {
		processGuid string
	}
	getAllActualLRPsByProcessGuidReturns struct {
		result1 []receptor.ActualLRPResponse
		result2 error
	}
	ActualLRPsByProcessGuidAndIndexStub              func(processGuid string, index int) ([]receptor.ActualLRPResponse, error)
	getAllActualLRPsByProcessGuidAndIndexMutex       sync.RWMutex
	getAllActualLRPsByProcessGuidAndIndexArgsForCall []struct {
		processGuid string
		index       int
	}
	getAllActualLRPsByProcessGuidAndIndexReturns struct {
		result1 []receptor.ActualLRPResponse
		result2 error
	}
	KillActualLRPsByProcessGuidAndIndexStub        func(processGuid string, index int) error
	killActualLRPsByProcessGuidAndIndexMutex       sync.RWMutex
	killActualLRPsByProcessGuidAndIndexArgsForCall []struct {
		processGuid string
		index       int
	}
	killActualLRPsByProcessGuidAndIndexReturns struct {
		result1 error
	}
	CellsStub        func() ([]receptor.CellResponse, error)
	cellsMutex       sync.RWMutex
	cellsArgsForCall []struct{}
	cellsReturns     struct {
		result1 []receptor.CellResponse
		result2 error
	}
	BumpFreshDomainStub        func(receptor.FreshDomainBumpRequest) error
	bumpFreshDomainMutex       sync.RWMutex
	bumpFreshDomainArgsForCall []struct {
		arg1 receptor.FreshDomainBumpRequest
	}
	bumpFreshDomainReturns struct {
		result1 error
	}
	FreshDomainsStub        func() ([]receptor.FreshDomainResponse, error)
	freshDomainsMutex       sync.RWMutex
	freshDomainsArgsForCall []struct{}
	freshDomainsReturns     struct {
		result1 []receptor.FreshDomainResponse
		result2 error
	}
}

func (fake *FakeClient) CreateTask(arg1 receptor.TaskCreateRequest) error {
	fake.createTaskMutex.Lock()
	fake.createTaskArgsForCall = append(fake.createTaskArgsForCall, struct {
		arg1 receptor.TaskCreateRequest
	}{arg1})
	fake.createTaskMutex.Unlock()
	if fake.CreateTaskStub != nil {
		return fake.CreateTaskStub(arg1)
	} else {
		return fake.createTaskReturns.result1
	}
}

func (fake *FakeClient) CreateTaskCallCount() int {
	fake.createTaskMutex.RLock()
	defer fake.createTaskMutex.RUnlock()
	return len(fake.createTaskArgsForCall)
}

func (fake *FakeClient) CreateTaskArgsForCall(i int) receptor.TaskCreateRequest {
	fake.createTaskMutex.RLock()
	defer fake.createTaskMutex.RUnlock()
	return fake.createTaskArgsForCall[i].arg1
}

func (fake *FakeClient) CreateTaskReturns(result1 error) {
	fake.CreateTaskStub = nil
	fake.createTaskReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeClient) Tasks() ([]receptor.TaskResponse, error) {
	fake.getAllTasksMutex.Lock()
	fake.getAllTasksArgsForCall = append(fake.getAllTasksArgsForCall, struct{}{})
	fake.getAllTasksMutex.Unlock()
	if fake.TasksStub != nil {
		return fake.TasksStub()
	} else {
		return fake.getAllTasksReturns.result1, fake.getAllTasksReturns.result2
	}
}

func (fake *FakeClient) TasksCallCount() int {
	fake.getAllTasksMutex.RLock()
	defer fake.getAllTasksMutex.RUnlock()
	return len(fake.getAllTasksArgsForCall)
}

func (fake *FakeClient) TasksReturns(result1 []receptor.TaskResponse, result2 error) {
	fake.TasksStub = nil
	fake.getAllTasksReturns = struct {
		result1 []receptor.TaskResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) TasksByDomain(domain string) ([]receptor.TaskResponse, error) {
	fake.getAllTasksByDomainMutex.Lock()
	fake.getAllTasksByDomainArgsForCall = append(fake.getAllTasksByDomainArgsForCall, struct {
		domain string
	}{domain})
	fake.getAllTasksByDomainMutex.Unlock()
	if fake.TasksByDomainStub != nil {
		return fake.TasksByDomainStub(domain)
	} else {
		return fake.getAllTasksByDomainReturns.result1, fake.getAllTasksByDomainReturns.result2
	}
}

func (fake *FakeClient) TasksByDomainCallCount() int {
	fake.getAllTasksByDomainMutex.RLock()
	defer fake.getAllTasksByDomainMutex.RUnlock()
	return len(fake.getAllTasksByDomainArgsForCall)
}

func (fake *FakeClient) TasksByDomainArgsForCall(i int) string {
	fake.getAllTasksByDomainMutex.RLock()
	defer fake.getAllTasksByDomainMutex.RUnlock()
	return fake.getAllTasksByDomainArgsForCall[i].domain
}

func (fake *FakeClient) TasksByDomainReturns(result1 []receptor.TaskResponse, result2 error) {
	fake.TasksByDomainStub = nil
	fake.getAllTasksByDomainReturns = struct {
		result1 []receptor.TaskResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) GetTask(taskId string) (receptor.TaskResponse, error) {
	fake.getTaskMutex.Lock()
	fake.getTaskArgsForCall = append(fake.getTaskArgsForCall, struct {
		taskId string
	}{taskId})
	fake.getTaskMutex.Unlock()
	if fake.GetTaskStub != nil {
		return fake.GetTaskStub(taskId)
	} else {
		return fake.getTaskReturns.result1, fake.getTaskReturns.result2
	}
}

func (fake *FakeClient) GetTaskCallCount() int {
	fake.getTaskMutex.RLock()
	defer fake.getTaskMutex.RUnlock()
	return len(fake.getTaskArgsForCall)
}

func (fake *FakeClient) GetTaskArgsForCall(i int) string {
	fake.getTaskMutex.RLock()
	defer fake.getTaskMutex.RUnlock()
	return fake.getTaskArgsForCall[i].taskId
}

func (fake *FakeClient) GetTaskReturns(result1 receptor.TaskResponse, result2 error) {
	fake.GetTaskStub = nil
	fake.getTaskReturns = struct {
		result1 receptor.TaskResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) DeleteTask(taskId string) error {
	fake.deleteTaskMutex.Lock()
	fake.deleteTaskArgsForCall = append(fake.deleteTaskArgsForCall, struct {
		taskId string
	}{taskId})
	fake.deleteTaskMutex.Unlock()
	if fake.DeleteTaskStub != nil {
		return fake.DeleteTaskStub(taskId)
	} else {
		return fake.deleteTaskReturns.result1
	}
}

func (fake *FakeClient) DeleteTaskCallCount() int {
	fake.deleteTaskMutex.RLock()
	defer fake.deleteTaskMutex.RUnlock()
	return len(fake.deleteTaskArgsForCall)
}

func (fake *FakeClient) DeleteTaskArgsForCall(i int) string {
	fake.deleteTaskMutex.RLock()
	defer fake.deleteTaskMutex.RUnlock()
	return fake.deleteTaskArgsForCall[i].taskId
}

func (fake *FakeClient) DeleteTaskReturns(result1 error) {
	fake.DeleteTaskStub = nil
	fake.deleteTaskReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeClient) CancelTask(taskId string) error {
	fake.cancelTaskMutex.Lock()
	fake.cancelTaskArgsForCall = append(fake.cancelTaskArgsForCall, struct {
		taskId string
	}{taskId})
	fake.cancelTaskMutex.Unlock()
	if fake.CancelTaskStub != nil {
		return fake.CancelTaskStub(taskId)
	} else {
		return fake.cancelTaskReturns.result1
	}
}

func (fake *FakeClient) CancelTaskCallCount() int {
	fake.cancelTaskMutex.RLock()
	defer fake.cancelTaskMutex.RUnlock()
	return len(fake.cancelTaskArgsForCall)
}

func (fake *FakeClient) CancelTaskArgsForCall(i int) string {
	fake.cancelTaskMutex.RLock()
	defer fake.cancelTaskMutex.RUnlock()
	return fake.cancelTaskArgsForCall[i].taskId
}

func (fake *FakeClient) CancelTaskReturns(result1 error) {
	fake.CancelTaskStub = nil
	fake.cancelTaskReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeClient) CreateDesiredLRP(arg1 receptor.DesiredLRPCreateRequest) error {
	fake.createDesiredLRPMutex.Lock()
	fake.createDesiredLRPArgsForCall = append(fake.createDesiredLRPArgsForCall, struct {
		arg1 receptor.DesiredLRPCreateRequest
	}{arg1})
	fake.createDesiredLRPMutex.Unlock()
	if fake.CreateDesiredLRPStub != nil {
		return fake.CreateDesiredLRPStub(arg1)
	} else {
		return fake.createDesiredLRPReturns.result1
	}
}

func (fake *FakeClient) CreateDesiredLRPCallCount() int {
	fake.createDesiredLRPMutex.RLock()
	defer fake.createDesiredLRPMutex.RUnlock()
	return len(fake.createDesiredLRPArgsForCall)
}

func (fake *FakeClient) CreateDesiredLRPArgsForCall(i int) receptor.DesiredLRPCreateRequest {
	fake.createDesiredLRPMutex.RLock()
	defer fake.createDesiredLRPMutex.RUnlock()
	return fake.createDesiredLRPArgsForCall[i].arg1
}

func (fake *FakeClient) CreateDesiredLRPReturns(result1 error) {
	fake.CreateDesiredLRPStub = nil
	fake.createDesiredLRPReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeClient) GetDesiredLRP(processGuid string) (receptor.DesiredLRPResponse, error) {
	fake.getDesiredLRPMutex.Lock()
	fake.getDesiredLRPArgsForCall = append(fake.getDesiredLRPArgsForCall, struct {
		processGuid string
	}{processGuid})
	fake.getDesiredLRPMutex.Unlock()
	if fake.GetDesiredLRPStub != nil {
		return fake.GetDesiredLRPStub(processGuid)
	} else {
		return fake.getDesiredLRPReturns.result1, fake.getDesiredLRPReturns.result2
	}
}

func (fake *FakeClient) GetDesiredLRPCallCount() int {
	fake.getDesiredLRPMutex.RLock()
	defer fake.getDesiredLRPMutex.RUnlock()
	return len(fake.getDesiredLRPArgsForCall)
}

func (fake *FakeClient) GetDesiredLRPArgsForCall(i int) string {
	fake.getDesiredLRPMutex.RLock()
	defer fake.getDesiredLRPMutex.RUnlock()
	return fake.getDesiredLRPArgsForCall[i].processGuid
}

func (fake *FakeClient) GetDesiredLRPReturns(result1 receptor.DesiredLRPResponse, result2 error) {
	fake.GetDesiredLRPStub = nil
	fake.getDesiredLRPReturns = struct {
		result1 receptor.DesiredLRPResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) UpdateDesiredLRP(processGuid string, update receptor.DesiredLRPUpdateRequest) error {
	fake.updateDesiredLRPMutex.Lock()
	fake.updateDesiredLRPArgsForCall = append(fake.updateDesiredLRPArgsForCall, struct {
		processGuid string
		update      receptor.DesiredLRPUpdateRequest
	}{processGuid, update})
	fake.updateDesiredLRPMutex.Unlock()
	if fake.UpdateDesiredLRPStub != nil {
		return fake.UpdateDesiredLRPStub(processGuid, update)
	} else {
		return fake.updateDesiredLRPReturns.result1
	}
}

func (fake *FakeClient) UpdateDesiredLRPCallCount() int {
	fake.updateDesiredLRPMutex.RLock()
	defer fake.updateDesiredLRPMutex.RUnlock()
	return len(fake.updateDesiredLRPArgsForCall)
}

func (fake *FakeClient) UpdateDesiredLRPArgsForCall(i int) (string, receptor.DesiredLRPUpdateRequest) {
	fake.updateDesiredLRPMutex.RLock()
	defer fake.updateDesiredLRPMutex.RUnlock()
	return fake.updateDesiredLRPArgsForCall[i].processGuid, fake.updateDesiredLRPArgsForCall[i].update
}

func (fake *FakeClient) UpdateDesiredLRPReturns(result1 error) {
	fake.UpdateDesiredLRPStub = nil
	fake.updateDesiredLRPReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeClient) DeleteDesiredLRP(processGuid string) error {
	fake.deleteDesiredLRPMutex.Lock()
	fake.deleteDesiredLRPArgsForCall = append(fake.deleteDesiredLRPArgsForCall, struct {
		processGuid string
	}{processGuid})
	fake.deleteDesiredLRPMutex.Unlock()
	if fake.DeleteDesiredLRPStub != nil {
		return fake.DeleteDesiredLRPStub(processGuid)
	} else {
		return fake.deleteDesiredLRPReturns.result1
	}
}

func (fake *FakeClient) DeleteDesiredLRPCallCount() int {
	fake.deleteDesiredLRPMutex.RLock()
	defer fake.deleteDesiredLRPMutex.RUnlock()
	return len(fake.deleteDesiredLRPArgsForCall)
}

func (fake *FakeClient) DeleteDesiredLRPArgsForCall(i int) string {
	fake.deleteDesiredLRPMutex.RLock()
	defer fake.deleteDesiredLRPMutex.RUnlock()
	return fake.deleteDesiredLRPArgsForCall[i].processGuid
}

func (fake *FakeClient) DeleteDesiredLRPReturns(result1 error) {
	fake.DeleteDesiredLRPStub = nil
	fake.deleteDesiredLRPReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeClient) DesiredLRPs() ([]receptor.DesiredLRPResponse, error) {
	fake.getAllDesiredLRPsMutex.Lock()
	fake.getAllDesiredLRPsArgsForCall = append(fake.getAllDesiredLRPsArgsForCall, struct{}{})
	fake.getAllDesiredLRPsMutex.Unlock()
	if fake.DesiredLRPsStub != nil {
		return fake.DesiredLRPsStub()
	} else {
		return fake.getAllDesiredLRPsReturns.result1, fake.getAllDesiredLRPsReturns.result2
	}
}

func (fake *FakeClient) DesiredLRPsCallCount() int {
	fake.getAllDesiredLRPsMutex.RLock()
	defer fake.getAllDesiredLRPsMutex.RUnlock()
	return len(fake.getAllDesiredLRPsArgsForCall)
}

func (fake *FakeClient) DesiredLRPsReturns(result1 []receptor.DesiredLRPResponse, result2 error) {
	fake.DesiredLRPsStub = nil
	fake.getAllDesiredLRPsReturns = struct {
		result1 []receptor.DesiredLRPResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) DesiredLRPsByDomain(domain string) ([]receptor.DesiredLRPResponse, error) {
	fake.getAllDesiredLRPsByDomainMutex.Lock()
	fake.getAllDesiredLRPsByDomainArgsForCall = append(fake.getAllDesiredLRPsByDomainArgsForCall, struct {
		domain string
	}{domain})
	fake.getAllDesiredLRPsByDomainMutex.Unlock()
	if fake.DesiredLRPsByDomainStub != nil {
		return fake.DesiredLRPsByDomainStub(domain)
	} else {
		return fake.getAllDesiredLRPsByDomainReturns.result1, fake.getAllDesiredLRPsByDomainReturns.result2
	}
}

func (fake *FakeClient) DesiredLRPsByDomainCallCount() int {
	fake.getAllDesiredLRPsByDomainMutex.RLock()
	defer fake.getAllDesiredLRPsByDomainMutex.RUnlock()
	return len(fake.getAllDesiredLRPsByDomainArgsForCall)
}

func (fake *FakeClient) DesiredLRPsByDomainArgsForCall(i int) string {
	fake.getAllDesiredLRPsByDomainMutex.RLock()
	defer fake.getAllDesiredLRPsByDomainMutex.RUnlock()
	return fake.getAllDesiredLRPsByDomainArgsForCall[i].domain
}

func (fake *FakeClient) DesiredLRPsByDomainReturns(result1 []receptor.DesiredLRPResponse, result2 error) {
	fake.DesiredLRPsByDomainStub = nil
	fake.getAllDesiredLRPsByDomainReturns = struct {
		result1 []receptor.DesiredLRPResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) ActualLRPs() ([]receptor.ActualLRPResponse, error) {
	fake.getAllActualLRPsMutex.Lock()
	fake.getAllActualLRPsArgsForCall = append(fake.getAllActualLRPsArgsForCall, struct{}{})
	fake.getAllActualLRPsMutex.Unlock()
	if fake.ActualLRPsStub != nil {
		return fake.ActualLRPsStub()
	} else {
		return fake.getAllActualLRPsReturns.result1, fake.getAllActualLRPsReturns.result2
	}
}

func (fake *FakeClient) ActualLRPsCallCount() int {
	fake.getAllActualLRPsMutex.RLock()
	defer fake.getAllActualLRPsMutex.RUnlock()
	return len(fake.getAllActualLRPsArgsForCall)
}

func (fake *FakeClient) ActualLRPsReturns(result1 []receptor.ActualLRPResponse, result2 error) {
	fake.ActualLRPsStub = nil
	fake.getAllActualLRPsReturns = struct {
		result1 []receptor.ActualLRPResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) ActualLRPsByDomain(domain string) ([]receptor.ActualLRPResponse, error) {
	fake.getAllActualLRPsByDomainMutex.Lock()
	fake.getAllActualLRPsByDomainArgsForCall = append(fake.getAllActualLRPsByDomainArgsForCall, struct {
		domain string
	}{domain})
	fake.getAllActualLRPsByDomainMutex.Unlock()
	if fake.ActualLRPsByDomainStub != nil {
		return fake.ActualLRPsByDomainStub(domain)
	} else {
		return fake.getAllActualLRPsByDomainReturns.result1, fake.getAllActualLRPsByDomainReturns.result2
	}
}

func (fake *FakeClient) ActualLRPsByDomainCallCount() int {
	fake.getAllActualLRPsByDomainMutex.RLock()
	defer fake.getAllActualLRPsByDomainMutex.RUnlock()
	return len(fake.getAllActualLRPsByDomainArgsForCall)
}

func (fake *FakeClient) ActualLRPsByDomainArgsForCall(i int) string {
	fake.getAllActualLRPsByDomainMutex.RLock()
	defer fake.getAllActualLRPsByDomainMutex.RUnlock()
	return fake.getAllActualLRPsByDomainArgsForCall[i].domain
}

func (fake *FakeClient) ActualLRPsByDomainReturns(result1 []receptor.ActualLRPResponse, result2 error) {
	fake.ActualLRPsByDomainStub = nil
	fake.getAllActualLRPsByDomainReturns = struct {
		result1 []receptor.ActualLRPResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) ActualLRPsByProcessGuid(processGuid string) ([]receptor.ActualLRPResponse, error) {
	fake.getAllActualLRPsByProcessGuidMutex.Lock()
	fake.getAllActualLRPsByProcessGuidArgsForCall = append(fake.getAllActualLRPsByProcessGuidArgsForCall, struct {
		processGuid string
	}{processGuid})
	fake.getAllActualLRPsByProcessGuidMutex.Unlock()
	if fake.ActualLRPsByProcessGuidStub != nil {
		return fake.ActualLRPsByProcessGuidStub(processGuid)
	} else {
		return fake.getAllActualLRPsByProcessGuidReturns.result1, fake.getAllActualLRPsByProcessGuidReturns.result2
	}
}

func (fake *FakeClient) ActualLRPsByProcessGuidCallCount() int {
	fake.getAllActualLRPsByProcessGuidMutex.RLock()
	defer fake.getAllActualLRPsByProcessGuidMutex.RUnlock()
	return len(fake.getAllActualLRPsByProcessGuidArgsForCall)
}

func (fake *FakeClient) ActualLRPsByProcessGuidArgsForCall(i int) string {
	fake.getAllActualLRPsByProcessGuidMutex.RLock()
	defer fake.getAllActualLRPsByProcessGuidMutex.RUnlock()
	return fake.getAllActualLRPsByProcessGuidArgsForCall[i].processGuid
}

func (fake *FakeClient) ActualLRPsByProcessGuidReturns(result1 []receptor.ActualLRPResponse, result2 error) {
	fake.ActualLRPsByProcessGuidStub = nil
	fake.getAllActualLRPsByProcessGuidReturns = struct {
		result1 []receptor.ActualLRPResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) ActualLRPsByProcessGuidAndIndex(processGuid string, index int) ([]receptor.ActualLRPResponse, error) {
	fake.getAllActualLRPsByProcessGuidAndIndexMutex.Lock()
	fake.getAllActualLRPsByProcessGuidAndIndexArgsForCall = append(fake.getAllActualLRPsByProcessGuidAndIndexArgsForCall, struct {
		processGuid string
		index       int
	}{processGuid, index})
	fake.getAllActualLRPsByProcessGuidAndIndexMutex.Unlock()
	if fake.ActualLRPsByProcessGuidAndIndexStub != nil {
		return fake.ActualLRPsByProcessGuidAndIndexStub(processGuid, index)
	} else {
		return fake.getAllActualLRPsByProcessGuidAndIndexReturns.result1, fake.getAllActualLRPsByProcessGuidAndIndexReturns.result2
	}
}

func (fake *FakeClient) ActualLRPsByProcessGuidAndIndexCallCount() int {
	fake.getAllActualLRPsByProcessGuidAndIndexMutex.RLock()
	defer fake.getAllActualLRPsByProcessGuidAndIndexMutex.RUnlock()
	return len(fake.getAllActualLRPsByProcessGuidAndIndexArgsForCall)
}

func (fake *FakeClient) ActualLRPsByProcessGuidAndIndexArgsForCall(i int) (string, int) {
	fake.getAllActualLRPsByProcessGuidAndIndexMutex.RLock()
	defer fake.getAllActualLRPsByProcessGuidAndIndexMutex.RUnlock()
	return fake.getAllActualLRPsByProcessGuidAndIndexArgsForCall[i].processGuid, fake.getAllActualLRPsByProcessGuidAndIndexArgsForCall[i].index
}

func (fake *FakeClient) ActualLRPsByProcessGuidAndIndexReturns(result1 []receptor.ActualLRPResponse, result2 error) {
	fake.ActualLRPsByProcessGuidAndIndexStub = nil
	fake.getAllActualLRPsByProcessGuidAndIndexReturns = struct {
		result1 []receptor.ActualLRPResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) KillActualLRPsByProcessGuidAndIndex(processGuid string, index int) error {
	fake.killActualLRPsByProcessGuidAndIndexMutex.Lock()
	fake.killActualLRPsByProcessGuidAndIndexArgsForCall = append(fake.killActualLRPsByProcessGuidAndIndexArgsForCall, struct {
		processGuid string
		index       int
	}{processGuid, index})
	fake.killActualLRPsByProcessGuidAndIndexMutex.Unlock()
	if fake.KillActualLRPsByProcessGuidAndIndexStub != nil {
		return fake.KillActualLRPsByProcessGuidAndIndexStub(processGuid, index)
	} else {
		return fake.killActualLRPsByProcessGuidAndIndexReturns.result1
	}
}

func (fake *FakeClient) KillActualLRPsByProcessGuidAndIndexCallCount() int {
	fake.killActualLRPsByProcessGuidAndIndexMutex.RLock()
	defer fake.killActualLRPsByProcessGuidAndIndexMutex.RUnlock()
	return len(fake.killActualLRPsByProcessGuidAndIndexArgsForCall)
}

func (fake *FakeClient) KillActualLRPsByProcessGuidAndIndexArgsForCall(i int) (string, int) {
	fake.killActualLRPsByProcessGuidAndIndexMutex.RLock()
	defer fake.killActualLRPsByProcessGuidAndIndexMutex.RUnlock()
	return fake.killActualLRPsByProcessGuidAndIndexArgsForCall[i].processGuid, fake.killActualLRPsByProcessGuidAndIndexArgsForCall[i].index
}

func (fake *FakeClient) KillActualLRPsByProcessGuidAndIndexReturns(result1 error) {
	fake.KillActualLRPsByProcessGuidAndIndexStub = nil
	fake.killActualLRPsByProcessGuidAndIndexReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeClient) Cells() ([]receptor.CellResponse, error) {
	fake.cellsMutex.Lock()
	fake.cellsArgsForCall = append(fake.cellsArgsForCall, struct{}{})
	fake.cellsMutex.Unlock()
	if fake.CellsStub != nil {
		return fake.CellsStub()
	} else {
		return fake.cellsReturns.result1, fake.cellsReturns.result2
	}
}

func (fake *FakeClient) CellsCallCount() int {
	fake.cellsMutex.RLock()
	defer fake.cellsMutex.RUnlock()
	return len(fake.cellsArgsForCall)
}

func (fake *FakeClient) CellsReturns(result1 []receptor.CellResponse, result2 error) {
	fake.CellsStub = nil
	fake.cellsReturns = struct {
		result1 []receptor.CellResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) BumpFreshDomain(arg1 receptor.FreshDomainBumpRequest) error {
	fake.bumpFreshDomainMutex.Lock()
	fake.bumpFreshDomainArgsForCall = append(fake.bumpFreshDomainArgsForCall, struct {
		arg1 receptor.FreshDomainBumpRequest
	}{arg1})
	fake.bumpFreshDomainMutex.Unlock()
	if fake.BumpFreshDomainStub != nil {
		return fake.BumpFreshDomainStub(arg1)
	} else {
		return fake.bumpFreshDomainReturns.result1
	}
}

func (fake *FakeClient) BumpFreshDomainCallCount() int {
	fake.bumpFreshDomainMutex.RLock()
	defer fake.bumpFreshDomainMutex.RUnlock()
	return len(fake.bumpFreshDomainArgsForCall)
}

func (fake *FakeClient) BumpFreshDomainArgsForCall(i int) receptor.FreshDomainBumpRequest {
	fake.bumpFreshDomainMutex.RLock()
	defer fake.bumpFreshDomainMutex.RUnlock()
	return fake.bumpFreshDomainArgsForCall[i].arg1
}

func (fake *FakeClient) BumpFreshDomainReturns(result1 error) {
	fake.BumpFreshDomainStub = nil
	fake.bumpFreshDomainReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeClient) FreshDomains() ([]receptor.FreshDomainResponse, error) {
	fake.freshDomainsMutex.Lock()
	fake.freshDomainsArgsForCall = append(fake.freshDomainsArgsForCall, struct{}{})
	fake.freshDomainsMutex.Unlock()
	if fake.FreshDomainsStub != nil {
		return fake.FreshDomainsStub()
	} else {
		return fake.freshDomainsReturns.result1, fake.freshDomainsReturns.result2
	}
}

func (fake *FakeClient) FreshDomainsCallCount() int {
	fake.freshDomainsMutex.RLock()
	defer fake.freshDomainsMutex.RUnlock()
	return len(fake.freshDomainsArgsForCall)
}

func (fake *FakeClient) FreshDomainsReturns(result1 []receptor.FreshDomainResponse, result2 error) {
	fake.FreshDomainsStub = nil
	fake.freshDomainsReturns = struct {
		result1 []receptor.FreshDomainResponse
		result2 error
	}{result1, result2}
}

var _ receptor.Client = new(FakeClient)
